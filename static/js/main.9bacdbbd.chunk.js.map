{"version":3,"sources":["game_logic/utils.js","img/ih_cross_o.svg","img/play_img.svg","img/reset_img.svg","img/restart_img.svg","img/show_img.svg","MastermindComp.js","Mastermind.js","img/ih_bars.svg","index.js"],"names":["randomGuess","holes","colors","guess","Array","fill","k","Math","floor","random","MMcolor","color","bgColor","className","style","backgroundColor","src","process","draggable","MMtoGuess","toGuess","colorOptions","onNewGame","onGiveUp","onClick","show_img","width","height","paddingLeft","paddingTop","restart_img","map","e","i","MMcolorEditor","setColor","useState","tmpColor","setTmpColor","editOn","setEditOn","useEffect","listenerAction","window","addEventListener","removeEventListener","onMouseDown","onMouseEnter","onMouseEnterAction","onMouseLeave","onMouseUp","onMouseUpAction","MMguessBuilder","setColors","onSubmit","isValid","setIsValid","reduce","p","c","disabled","play_img","length","reset_img","nC","MMguessResPin","type","MMguessRes","gcgp","gcbp","pins","push","MMguess","result","randomId","toString","replace","substring","Mastermind","gameDim","id","setToGuess","gameOver","setGameOver","guesses","setGuesses","currentGuess","setCurrentGuess","configOn","config","g","r","guessRes","tg","splice","indexOf","checkGuess","pG","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bacdbbd.chunk.js","sourcesContent":["\r\nlet C = 0;\r\n\r\nconst randomGuess = (holes, colors) => {\r\n    const guess = Array(holes).fill(0);\r\n    for (let k = 0; k < holes; k++) {\r\n        guess[k] = Math.floor(Math.random() * (colors)) + 1\r\n    }\r\n    C = 0;\r\n    return (guess)\r\n}\r\n\r\n\r\nconst checkGuess = (guess, toGuess) => {\r\n    const g = [...guess], tg = [...toGuess];\r\n    // console.log(guess)\r\n    // console.log(toGuess)\r\n    let gcgp = 0, gcbp = 0;\r\n    // check good color + good position:\r\n    for (let k = g.length - 1; k >=0 ; k--) {\r\n        if (g[k] === tg[k]) {\r\n            gcgp ++;\r\n            g.splice(k, 1)\r\n            tg.splice(k, 1)\r\n        }\r\n    }\r\n    // console.log(\"*\".repeat(10))\r\n    // console.log(gcgp)\r\n    // console.log(g)\r\n    // console.log(tg)\r\n    // check good color + bad position:\r\n    for (let k = 0; k < g.length; k++) {\r\n        let i = tg.indexOf(g[k])\r\n        if (i != -1) {\r\n            gcbp ++;\r\n            tg.splice(i, 1)\r\n        }\r\n    }\r\n    // console.log(gcbp)\r\n    // console.log(g)\r\n    // console.log(tg)\r\n    return {gcgp:gcgp, gcbp:gcbp}\r\n}\r\n\r\n\r\nexport {randomGuess, checkGuess};","export default __webpack_public_path__ + \"static/media/ih_cross_o.47c833b5.svg\";","export default __webpack_public_path__ + \"static/media/play_img.7d3e38b7.svg\";","export default __webpack_public_path__ + \"static/media/reset_img.1e2ba6d8.svg\";","export default __webpack_public_path__ + \"static/media/restart_img.6de84e33.svg\";","export default __webpack_public_path__ + \"static/media/show_img.348eafda.svg\";","import { useEffect, useState } from \"react\"\r\nimport play_img from \"./img/play_img.svg\"\r\nimport reset_img from \"./img/reset_img.svg\"\r\nimport restart_img from \"./img/restart_img.svg\"\r\nimport show_img from \"./img/show_img.svg\"\r\n\r\nconst MMcolor = ({color}) => {\r\n    const bgColor = color === \"transparent\" ? \"grey\" : \"transparent\"\r\n    return (\r\n        // colored div version\r\n        // <div className=\"one-color\"\r\n        // style={{backgroundColor:color}}\r\n        // ></div>\r\n        // image version\r\n        <button className=\"one-color-btn\"\r\n        style={{backgroundColor:bgColor}}\r\n        >\r\n        {\r\n            color === \"transparent\" ? null :\r\n            <img src={process.env.PUBLIC_URL+\"/\"+color+\"_pin.png\"} className=\"one-color-img\" draggable=\"false\"/>\r\n        }\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nconst MMtoGuess = ({toGuess, colorOptions, onNewGame, onGiveUp}) => {\r\n\r\n    return (\r\n        <div className=\"one-color-row\">\r\n            <div className=\"mm-ingame-btns-left\">\r\n                <button onClick={onGiveUp}> \r\n                <img src={show_img} className=\"btn-img\" draggable=\"false\"\r\n                    style={{\r\n                        width: \"90%\",\r\n                        height: \"90%\",\r\n                        paddingLeft: \"0px\",\r\n                        paddingTop: \"2px\",\r\n                        \r\n                    }}/>\r\n                </button>    \r\n                <button onClick={onNewGame}>\r\n                <img src={restart_img} className=\"btn-img\" draggable=\"false\"\r\n                    style={{\r\n                        width: \"90%\",\r\n                        height: \"90%\",\r\n                        paddingLeft: \"0px\",\r\n                        paddingTop: \"2px\"\r\n                    }}/>\r\n                </button>    \r\n            </div>\r\n            {\r\n                toGuess.map((e, i)=> {\r\n                    return (\r\n                        <MMcolor key={i} color={colorOptions[e].color}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMcolorEditor = ({colorOptions, color, setColor}) => {\r\n    const [tmpColor, setTmpColor] = useState(0);\r\n    const [editOn, setEditOn] = useState(false);\r\n    useEffect(()=> {\r\n        const listenerAction = () => {\r\n            setEditOn(false);\r\n        }\r\n        window.addEventListener(\"mouseup\", listenerAction)\r\n        return (\r\n            () => {\r\n                window.removeEventListener(\"mouseup\", listenerAction)\r\n            }\r\n        )\r\n    }, [setEditOn])\r\n    const onMouseDownAction = () => {\r\n        setEditOn(true);\r\n        setTmpColor(color);\r\n    }\r\n    const onMouseUpAction = (i) => {\r\n        setColor(i)\r\n    }\r\n    const onMouseEnterAction = (i) => {\r\n        setColor(i)\r\n    }\r\n    const onMouseLeaveAction = (i) => {\r\n        setColor(tmpColor)\r\n    }\r\n    return (\r\n        <div className=\"mm-editable-color\"\r\n            onMouseDown={onMouseDownAction}\r\n        >\r\n            <MMcolor color={colorOptions[color].color} />\r\n            { editOn ? (\r\n                <div className=\"mm-color-options\">\r\n                {\r\n                    colorOptions.map((e, i) => {\r\n                        if (i === 0) {\r\n                            return (null)\r\n                        }\r\n                        return (\r\n                            <div key={i}\r\n                            className=\"mm-color-option\"\r\n                            onMouseEnter={()=>{onMouseEnterAction(i)}}\r\n                            onMouseLeave={()=>{onMouseLeaveAction(i)}}\r\n                            onMouseUp={()=>{onMouseUpAction(i)}}\r\n                            >\r\n                                <MMcolor color={e.color} />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            ):(\r\n                null\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguessBuilder = ({colorOptions, colors, setColors, onSubmit}) => {\r\n    const [isValid, setIsValid] = useState(false);\r\n    useEffect(()=> {\r\n        setIsValid(colors.map((e)=>e!=0).reduce((p, c)=>p && c))\r\n    }, [colors, setIsValid])\r\n    const onReset = () => {\r\n        setColors(Array(colors.length).fill(0))\r\n    }\r\n    return (\r\n        <div className=\"one-color-row\">\r\n            <div className=\"mm-ingame-btns-right\">\r\n                <button onClick={()=>{onSubmit(colors)}}\r\n                    disabled={!isValid}\r\n                > \r\n                    <img src={play_img} className=\"btn-img\" draggable=\"false\"\r\n                    style={{\r\n                        width: \"90%\",\r\n                        height: \"90%\",\r\n                        paddingLeft: \"5px\",\r\n                        paddingTop: \"4px\"\r\n                    }}/>\r\n                </button>  \r\n            </div>\r\n            <div className=\"mm-ingame-btns-left\">\r\n                <button\r\n                    onClick={onReset}\r\n                > \r\n                    <img src={reset_img} className=\"btn-img\" draggable=\"false\"\r\n                    style={{\r\n                        width: \"90%\",\r\n                        height: \"90%\",\r\n                        paddingLeft: \"0px\",\r\n                        paddingTop: \"5px\"\r\n                    }}/>\r\n                </button>  \r\n            </div>\r\n            {\r\n                colors.map((e, i)=> {\r\n                    return (\r\n                        <MMcolorEditor key={i}\r\n                        colorOptions={colorOptions}\r\n                        color={e}\r\n                        setColor={(c) => {\r\n                            const nC = [...colors]\r\n                            nC[i] = c\r\n                            setColors(nC)\r\n                        }}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguessResPin = ({type}) => {\r\n    return (\r\n        <div className={\"mm-res-pin \" + type}>\r\n        </div>\r\n    )\r\n}\r\nconst MMguessRes = ({gcgp, gcbp}) => {\r\n    const pins = [];\r\n    for (let k = 0; k < gcgp; k++) {\r\n        pins.push(\"gcgp\")\r\n    }\r\n    for (let k = 0; k < gcbp; k++) {\r\n        pins.push(\"gcbp\")\r\n    }\r\n    return (\r\n        <div className=\"mm-result\">\r\n            {\r\n                pins.map((e,i) => {\r\n                    return (\r\n                        <MMguessResPin key={i} type={e} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguess = ({colors, result, colorOptions}) => {\r\n    return (\r\n        <div className=\"one-color-row\">\r\n            <MMguessRes gcgp={result.gcgp} gcbp={result.gcbp} />\r\n            {\r\n                colors.map((e, i) => {\r\n                    return (\r\n                        <MMcolor key={i}\r\n                        color={colorOptions[e].color} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport {MMtoGuess, MMguessBuilder, MMguess};","import React, {useState} from \"react\";\r\nimport \"./Mastermind.css\"\r\nimport {randomGuess, checkGuess} from \"./game_logic/utils\";\r\nimport MMconfig from \"./MMconfig\";\r\nimport {MMtoGuess, MMguessBuilder, MMguess} from \"./MastermindComp\";\r\nimport \"./MastermindComp.css\";\r\nimport ih_cross_o from \"./img/ih_cross_o.svg\"\r\nimport ih_bars from \"./img/ih_bars.svg\"\r\n\r\nconst randomId = () => {\r\n    return (\r\n        Math.random().toString(36)\r\n            .replace(\"0.\", \"\").substring(0, 10)\r\n    )\r\n}\r\n\r\n\r\n\r\nconst Mastermind = () => {\r\n    const [gameDim, setGameDim] = useState({\r\n        holes: 4,\r\n        colors: 6,\r\n    })\r\n    const [colorOptions, setColorOptions] = useState([\r\n        {\r\n        id: randomId(),\r\n        color: \"transparent\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"blue\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"green\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"yellow\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"red\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"black\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"white\",\r\n        },\r\n    ])\r\n    const [toGuess, setToGuess] = useState(randomGuess(gameDim.holes, gameDim.colors))\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [guesses, setGuesses] = useState([]);\r\n    const [currentGuess, setCurrentGuess] = useState(Array(gameDim.holes).fill(0))\r\n\r\n    const [configOn, setConfigOn] = useState(false);\r\n\r\n    const onNewGame = () => {\r\n        setGuesses([])\r\n        setCurrentGuess(Array(gameDim.holes).fill(0))\r\n        setToGuess(randomGuess(gameDim.holes, gameDim.colors))\r\n        setGameOver(false)\r\n    }\r\n\r\n    const onGiveUp = () => {\r\n        setGameOver(true)\r\n    }\r\n    const onSubmitGuess = (g) => {\r\n        const guessRes = checkGuess(g, toGuess)\r\n        if (guessRes.gcgp === toGuess.length) {\r\n            setGameOver(true);\r\n        }\r\n        setGuesses(pG => {\r\n            return ([...pG, {g: g, r:guessRes}])\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"mm-app-container\" config={configOn.toString()}>\r\n            <div className=\"title\">\r\n                Mastermind\r\n            </div>          \r\n            {/* <button className=\"toggle-config\" onClick={()=>setConfigOn(p=>!p)}>\r\n                {configOn ? (\r\n                <img src={ih_cross_o} \r\n                    className=\"mm-img-config\"\r\n                />\r\n                ) : (\r\n                    <img src={ih_bars} \r\n                    className=\"mm-img-config\"\r\n                />\r\n                )\r\n                }\r\n            </button> */}\r\n            <div className=\"game-config-container\">\r\n                <div className=\"config\">\r\n                {/* <MMconfig\r\n                    holes={gameDim.holes}\r\n                    colors={gameDim.colors}\r\n                    colorOptions={colorOptions}\r\n                /> */}\r\n                </div>\r\n                <div className=\"game\">\r\n                    {/* to guess object */}\r\n                    <MMtoGuess\r\n                    toGuess={gameOver ? toGuess : Array(toGuess.length).fill(0) }\r\n                    colorOptions={colorOptions}\r\n                    onNewGame={onNewGame}\r\n                    onGiveUp={onGiveUp}\r\n                    />\r\n                    {/* guesses */}\r\n                    {guesses.map((e, i)=> {\r\n                        return (\r\n                            <MMguess key={i}\r\n                            colors={e.g}\r\n                            result={e.r}\r\n                            colorOptions={colorOptions} />\r\n                        )\r\n                    })}\r\n                    {/* new guess */}\r\n                    {gameOver ? null : <MMguessBuilder\r\n                        // nHoles={toGuess.length}\r\n                        // colorOptions={colorOptions}\r\n                        // onSubmit={onSubmitGuess}\r\n                        colorOptions={colorOptions}\r\n                        colors={currentGuess}\r\n                        setColors={(c)=>{setCurrentGuess(c)}}\r\n                        onSubmit={onSubmitGuess}\r\n                    />}\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Mastermind;","export default __webpack_public_path__ + \"static/media/ih_bars.a11aaf4d.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Mastermind from './Mastermind'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Mastermind />\r\n  </React.StrictMode>\r\n  , \r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}