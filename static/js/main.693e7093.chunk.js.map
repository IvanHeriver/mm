{"version":3,"sources":["game_logic/utils.js","img/play_img.svg","img/reset_img.svg","img/restart_img.svg","img/show_img.svg","img/timer_img.svg","img/notimer_img.svg","MastermindComp.js","Mastermind.js","index.js"],"names":["randomGuess","holes","colors","guess","Array","fill","k","Math","floor","random","MMcolor","color","bgColor","className","style","backgroundColor","src","process","draggable","width","height","MMtoGuess","toGuess","colorOptions","onNewGame","onGiveUp","time","useState","showTimer","setShowTimer","onClick","show_img","paddingLeft","paddingTop","restart_img","t","m","s","formatTime","notimer_img","timer_img","map","e","i","MMcolorEditor","setColor","tmpColor","setTmpColor","editOn","setEditOn","useEffect","listenerAction","window","addEventListener","removeEventListener","getElemIdFromTouchEvent","event","elem","document","elementFromPoint","changedTouches","clientX","clientY","parentElement","getAttribute","parseInt","getElemIdFromMouseEvent","onTouchStart","onMouseDown","onTouchMove","id","onMouseMove","onMouseLeave","onTouchEnd","onMouseUp","idkey","MMguessBuilder","setColors","onSubmit","isValid","setIsValid","reduce","p","c","disabled","play_img","length","reset_img","nC","MMguessResPin","type","MMguessRes","gcgp","gcbp","pins","push","MMguess","result","number","randomId","toString","replace","substring","Mastermind","gameDim","setToGuess","gameOver","setGameOver","guesses","setGuesses","currentGuess","setCurrentGuess","setTime","timer","setTimer","stopTimer","clearInterval","g","r","setInterval","guessRes","tg","splice","indexOf","checkGuess","pG","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.693e7093.chunk.js","sourcesContent":["\r\nlet C = 0;\r\n\r\nconst randomGuess = (holes, colors) => {\r\n    const guess = Array(holes).fill(0);\r\n    for (let k = 0; k < holes; k++) {\r\n        guess[k] = Math.floor(Math.random() * (colors)) + 1\r\n    }\r\n    C = 0;\r\n    return (guess)\r\n}\r\n\r\n\r\nconst checkGuess = (guess, toGuess) => {\r\n    const g = [...guess], tg = [...toGuess];\r\n    // console.log(guess)\r\n    // console.log(toGuess)\r\n    let gcgp = 0, gcbp = 0;\r\n    // check good color + good position:\r\n    for (let k = g.length - 1; k >=0 ; k--) {\r\n        if (g[k] === tg[k]) {\r\n            gcgp ++;\r\n            g.splice(k, 1)\r\n            tg.splice(k, 1)\r\n        }\r\n    }\r\n    // console.log(\"*\".repeat(10))\r\n    // console.log(gcgp)\r\n    // console.log(g)\r\n    // console.log(tg)\r\n    // check good color + bad position:\r\n    for (let k = 0; k < g.length; k++) {\r\n        let i = tg.indexOf(g[k])\r\n        if (i != -1) {\r\n            gcbp ++;\r\n            tg.splice(i, 1)\r\n        }\r\n    }\r\n    // console.log(gcbp)\r\n    // console.log(g)\r\n    // console.log(tg)\r\n    return {gcgp:gcgp, gcbp:gcbp}\r\n}\r\n\r\n\r\nexport {randomGuess, checkGuess};","export default __webpack_public_path__ + \"static/media/play_img.64ed3886.svg\";","export default __webpack_public_path__ + \"static/media/reset_img.fb2f90cf.svg\";","export default __webpack_public_path__ + \"static/media/restart_img.0d02576d.svg\";","export default __webpack_public_path__ + \"static/media/show_img.5ea94971.svg\";","export default __webpack_public_path__ + \"static/media/timer_img.88d19741.svg\";","export default __webpack_public_path__ + \"static/media/notimer_img.ae9afe6c.svg\";","import { useEffect, useState } from \"react\"\r\nimport play_img from \"./img/play_img.svg\"\r\nimport reset_img from \"./img/reset_img.svg\"\r\nimport restart_img from \"./img/restart_img.svg\"\r\nimport show_img from \"./img/show_img.svg\"\r\nimport timer_img from \"./img/timer_img.svg\"\r\nimport notimer_img from \"./img/notimer_img.svg\"\r\n\r\nconst MMcolor = ({color}) => {\r\n    const bgColor = color === \"transparent\" ? \"grey\" : \"transparent\"\r\n    return (\r\n        // colored div version\r\n        // <div className=\"one-color\"\r\n        // style={{backgroundColor:color}}\r\n        // ></div>\r\n        // image version\r\n        <button className=\"one-color-btn\"\r\n        style={{backgroundColor:bgColor}}\r\n        >\r\n        {\r\n            color === \"transparent\" ? null :\r\n            <img src={process.env.PUBLIC_URL+\"/\"+color+\"_pin.png\"} className=\"one-color-img\" draggable=\"false\" width=\"40px\" height=\"40px\"/>\r\n        }\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nconst MMtoGuess = ({toGuess, colorOptions, onNewGame, onGiveUp, time}) => {\r\n    const [showTimer, setShowTimer] = useState(true);\r\n    const formatTime = (t) => {\r\n        // if (t === 0)  return \"00:00\"\r\n        let m = Math.floor(t / 60);\r\n        let s = t - m * 60;\r\n        if (m < 10) m = \"0\"+m\r\n        if (s < 10) s = \"0\"+s\r\n        return m+\":\"+s\r\n    }\r\n    return (\r\n        <div className=\"mm-toguess-container\">\r\n        <div className=\"one-color-row\">\r\n            <button onClick={onGiveUp}> \r\n            <img src={show_img} className=\"btn-img\" draggable=\"false\"\r\n                style={{\r\n                    width: \"90%\",\r\n                    height: \"90%\",\r\n                    paddingLeft: \"0px\",\r\n                    paddingTop: \"2px\",\r\n                    \r\n                }}/>\r\n            </button>    \r\n            <button onClick={onNewGame}>\r\n            <img src={restart_img} className=\"btn-img\" draggable=\"false\"\r\n                style={{\r\n                    width: \"90%\",\r\n                    height: \"90%\",\r\n                    paddingLeft: \"0px\",\r\n                    paddingTop: \"2px\"\r\n                }}/>\r\n            </button>    \r\n            {\r\n                showTimer ? <div className=\"mm-timer\"><div>{formatTime(time)}</div></div> : null\r\n            }\r\n            <button onClick={()=>setShowTimer(t=>!t)}>\r\n                <img src={showTimer ? notimer_img : timer_img} className=\"btn-img\" draggable=\"false\"\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                }}\r\n                />\r\n            </button>\r\n        </div>\r\n        <div className=\"one-color-row mm-rounded-border\">\r\n            {\r\n                toGuess.map((e, i)=> {\r\n                    return (\r\n                        <MMcolor key={i} color={colorOptions[e].color}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMcolorEditor = ({colorOptions, color, setColor}) => {\r\n    const [tmpColor, setTmpColor] = useState(0);\r\n    const [editOn, setEditOn] = useState(false);\r\n    useEffect(()=> {\r\n        const listenerAction = (e) => {\r\n            setEditOn(false);\r\n        }\r\n        window.addEventListener(\"mouseup\", listenerAction)\r\n        return (\r\n            () => {\r\n                window.removeEventListener(\"mouseup\", listenerAction)\r\n            }\r\n        )\r\n    }, [setEditOn])\r\n    const getElemIdFromTouchEvent = (event) => {\r\n        const elem = document.elementFromPoint(\r\n            event.changedTouches[0].clientX,\r\n            event.changedTouches[0].clientY\r\n        )\r\n        if (!elem) return null\r\n        if (!elem.parentElement.parentElement.getAttribute(\"idkey\")) return null\r\n        return(parseInt(elem.parentElement.parentElement.getAttribute(\"idkey\")))\r\n    }\r\n    const getElemIdFromMouseEvent = (event) => {\r\n        const elem = document.elementFromPoint(\r\n            event.clientX,\r\n            event.clientY\r\n        )\r\n        if (!elem) return null\r\n        if (!elem.parentElement.parentElement.getAttribute(\"idkey\")) return null\r\n        return(parseInt(elem.parentElement.parentElement.getAttribute(\"idkey\")))\r\n    }\r\n    return (\r\n        <div className=\"mm-editable-color\" \r\n            onTouchStart={()=> {\r\n                setEditOn(true)\r\n                setTmpColor(color)\r\n            }}\r\n            onMouseDown={()=> {\r\n                setEditOn(true)\r\n                setTmpColor(color)\r\n            }}\r\n            onTouchMove={(e)=> {\r\n                const id = getElemIdFromTouchEvent(e)\r\n                id ? setColor(id) : setColor(tmpColor)\r\n            }}\r\n            onMouseMove={(e)=>{\r\n                if (editOn) {\r\n                    const id = getElemIdFromMouseEvent(e)\r\n                    id ? setColor(id) : setColor(tmpColor)\r\n                }\r\n            }}\r\n            onMouseLeave={(e)=>{\r\n                if (editOn) {\r\n                    setColor(tmpColor)\r\n                }\r\n            }}\r\n            onTouchEnd={(e)=> {\r\n                const id = getElemIdFromTouchEvent(e)\r\n                if (id) setColor(id)\r\n                setEditOn(false)\r\n\r\n            }}\r\n            onMouseUp={(e)=> {\r\n                const id = getElemIdFromMouseEvent(e)\r\n                if (id) setColor(id)\r\n            }}\r\n        >\r\n            <MMcolor color={colorOptions[color].color} />\r\n            { editOn ? (\r\n                <div className=\"mm-color-options\" style={{['--m']: 6, ['--tan']: 0.41}}>\r\n                {/* <MMcolorOptions colorOptions={colorOptions} /> */}\r\n                {\r\n                    colorOptions.map((e, i) => {\r\n                        if (i === 0) {\r\n                            return (null)\r\n                        }\r\n                        return (\r\n                            <div key={i}\r\n                            idkey={i}\r\n                            // style={\"--i=\"+(i+1)}\r\n                            style={{['--i']: i+1}}\r\n                            >\r\n                                <MMcolor color={e.color} />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            ):(\r\n                null\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMcolorOptions = ({colorOptions}) => {\r\n    return (\r\n        colorOptions.map((e, i) => {\r\n            if (i === 0) {\r\n                return (null)\r\n            }\r\n            return (\r\n                <div key={i}\r\n                idkey={i}\r\n                >\r\n                    <MMcolor color={e.color} />\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nconst MMguessBuilder = ({colorOptions, colors, setColors, onSubmit}) => {\r\n    // const [isEditorOpen, setIsEditorOpen] = useState(Array(colors.length).fill(0));\r\n    const [isValid, setIsValid] = useState(false);\r\n    useEffect(()=> {\r\n        setIsValid(colors.map((e)=>e!=0).reduce((p, c)=>p && c))\r\n    }, [colors, setIsValid])\r\n    const onReset = () => {\r\n        setColors(Array(colors.length).fill(0))\r\n    }\r\n    return (\r\n        <div className=\"one-color-row\">\r\n            <div className=\"mm-ingame-btns-right\">\r\n                <button onClick={()=>{onSubmit(colors)}}\r\n                    disabled={!isValid}\r\n                > \r\n                    <img src={play_img} className=\"btn-img\" draggable=\"false\"\r\n                    style={{\r\n                        width: \"90%\",\r\n                        height: \"90%\",\r\n                        paddingLeft: \"5px\",\r\n                        paddingTop: \"4px\"\r\n                    }}/>\r\n                </button>  \r\n            </div>\r\n            <div className=\"mm-ingame-btns-left\">\r\n                <button\r\n                    onClick={onReset}\r\n                > \r\n                    <img src={reset_img} className=\"btn-img\" draggable=\"false\"\r\n                    style={{\r\n                        width: \"90%\",\r\n                        height: \"90%\",\r\n                        paddingLeft: \"0px\",\r\n                        paddingTop: \"5px\"\r\n                    }}/>\r\n                </button>  \r\n            </div>\r\n            {\r\n                colors.map((e, i)=> {\r\n                    return (\r\n                        <MMcolorEditor key={i}\r\n                        colorOptions={colorOptions}\r\n                        color={e}\r\n                        setColor={(c) => {\r\n                            const nC = [...colors]\r\n                            nC[i] = c\r\n                            setColors(nC)\r\n                        }}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguessResPin = ({type}) => {\r\n    return (\r\n        <div className={\"mm-res-pin \" + type}>\r\n        </div>\r\n    )\r\n}\r\nconst MMguessRes = ({gcgp, gcbp}) => {\r\n    const pins = [];\r\n    for (let k = 0; k < gcgp; k++) {\r\n        pins.push(\"gcgp\")\r\n    }\r\n    for (let k = 0; k < gcbp; k++) {\r\n        pins.push(\"gcbp\")\r\n    }\r\n    return (\r\n        <div className=\"mm-result\">\r\n            {\r\n                pins.map((e,i) => {\r\n                    return (\r\n                        <MMguessResPin key={i} type={e} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguess = ({colors, result, colorOptions, number}) => {\r\n    return (\r\n        <div className=\"one-color-row\">\r\n            <div className=\"mm-ingame-btns-right\"><div className=\"mm-number\">{number}</div></div>\r\n            <MMguessRes gcgp={result.gcgp} gcbp={result.gcbp} />\r\n            {\r\n                colors.map((e, i) => {\r\n                    return (\r\n                        <MMcolor key={i}\r\n                        color={colorOptions[e].color} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport {MMtoGuess, MMguessBuilder, MMguess};","import React, {useState, useEffect} from \"react\";\r\nimport \"./Mastermind.css\"\r\nimport {randomGuess, checkGuess} from \"./game_logic/utils\";\r\nimport {MMtoGuess, MMguessBuilder, MMguess} from \"./MastermindComp\";\r\nimport \"./MastermindComp.css\";\r\n\r\nconst randomId = () => {\r\n    return (\r\n        Math.random().toString(36)\r\n            .replace(\"0.\", \"\").substring(0, 10)\r\n    )\r\n}\r\n\r\n\r\n\r\nconst Mastermind = () => {\r\n    const [gameDim, setGameDim] = useState({\r\n        holes: 4,\r\n        colors: 6,\r\n    })\r\n    const [colorOptions, setColorOptions] = useState([\r\n        {\r\n        id: randomId(),\r\n        color: \"transparent\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"blue\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"green\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"yellow\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"red\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"black\",\r\n        },\r\n        {\r\n        id: randomId(),\r\n        color: \"white\",\r\n        },\r\n    ])\r\n    const [toGuess, setToGuess] = useState(randomGuess(gameDim.holes, gameDim.colors))\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [guesses, setGuesses] = useState([]);\r\n    const [currentGuess, setCurrentGuess] = useState(Array(gameDim.holes).fill(0))\r\n    \r\n    const [time, setTime] = useState(0);\r\n    const [timer, setTimer] = useState(null);\r\n\r\n    const resetTimer = () => {\r\n        setTime(0);\r\n    }\r\n    const startTimer = () => {\r\n        setTimer(setInterval(()=>{\r\n            setTime(t=>t+1)\r\n        }, 1000))\r\n    }\r\n    const stopTimer = () => {\r\n        clearInterval(timer)\r\n    }\r\n\r\n    const onNewGame = () => {\r\n        setGuesses([])\r\n        setCurrentGuess(Array(gameDim.holes).fill(0))\r\n        setToGuess(randomGuess(gameDim.holes, gameDim.colors))\r\n        setGameOver(false)\r\n        resetTimer();\r\n    }\r\n\r\n    const onGiveUp = () => {\r\n        setGameOver(true)\r\n        stopTimer();\r\n    }\r\n    const onSubmitGuess = (g) => {\r\n        if (guesses.length === 0) startTimer();\r\n        const guessRes = checkGuess(g, toGuess)\r\n        if (guessRes.gcgp === toGuess.length) {\r\n            setGameOver(true);\r\n            stopTimer();\r\n        }\r\n        setGuesses(pG => {\r\n            return ([...pG, {g: g, r:guessRes}])\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"mm-app-container\">\r\n            {/* <div className=\"title\">\r\n                MindMaster\r\n            </div>           */}\r\n            <div className=\"game-config-container\">\r\n                <div className=\"game\">\r\n                    {/* to guess object */}\r\n                    <MMtoGuess\r\n                    toGuess={gameOver ? toGuess : Array(toGuess.length).fill(0) }\r\n                    colorOptions={colorOptions}\r\n                    onNewGame={onNewGame}\r\n                    onGiveUp={onGiveUp}\r\n                    time={time}\r\n                    />\r\n                    {/* guesses */}\r\n                    {guesses.map((e, i)=> {\r\n                        return (\r\n                            <MMguess key={i}\r\n                            colors={e.g}\r\n                            result={e.r}\r\n                            colorOptions={colorOptions}\r\n                            number={i + 1}\r\n                             />\r\n                        )\r\n                    })}\r\n                    {/* new guess */}\r\n                    {gameOver ? null : <MMguessBuilder\r\n                        colorOptions={colorOptions}\r\n                        colors={currentGuess}\r\n                        setColors={(c)=>{setCurrentGuess(c)}}\r\n                        onSubmit={onSubmitGuess}\r\n                    />}\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Mastermind;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Mastermind from './Mastermind'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Mastermind />\r\n  </React.StrictMode>\r\n  , \r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}