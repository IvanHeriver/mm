{"version":3,"sources":["game_logic/utils.js","MMcomp.js","customWidgets/select-btn.js","MMcfg.js","MM.js","index.js"],"names":["randomGuess","holes","colors","guess","Array","fill","k","Math","floor","random","MMcolor","color","nomargin","className","src","process","draggable","MMtoGuess","toGuess","colorOptions","time","timerVisible","t","m","s","formatTime","map","e","i","MMcolorEditor","setColor","clickMode","useState","editOn","setEditOn","windowEventName","onTouchStart","onMouseDown","onTouchMove","onMouseMove","onTouchEnd","onMouseUp","onClick","console","log","id","getElemIdFromMouseEvent","setTimeout","getElemIdFromTouchEvent","useEffect","listenerAction","window","addEventListener","removeEventListener","event","elem","document","elementFromPoint","changedTouches","clientX","clientY","parentElement","getAttribute","parseInt","style","length","idkey","MMguessBuilder","setColors","onSubmit","clickSelectMode","isValid","setIsValid","reduce","p","c","disabled","nC","MMguessResPin","type","MMguessRes","gcgp","gcbp","pins","push","MMguess","result","number","SelectBtn","items","onChange","selected","multiselect","class_container","class_item","n","selectedItems","isArray","Number","isInteger","InitSelectBtn","setSelectedItems","selItems","j","onClickAction","isselected","MMbuttons","onNewGame","onGiveUp","onOpenConfig","MMconfig","onCloseConfig","nHoles","onNumberOfHolesChange","nColors","onNumberOfColorsChange","onSelectModeChange","onChangeTimerVisibility","numberHoles","numberColors","a","indexOf","allColors","MM","gameDim","setGameDim","tmpNcolors","setTmpNcolors","tmpNholes","setTmpNholes","slice","setColorOptions","updateGameLayout","onResize","setToGuess","gameOver","setGameOver","guesses","setGuesses","currentGuess","setCurrentGuess","configOpen","setConfigOpen","setTimerVisible","setClickSelectMode","setTime","timer","setTimer","stopTimer","clearInterval","onToggleConfig","open","r","querySelector","nW","body","clientWidth","W","min","setProperty","v","gd","g","setInterval","guessRes","tg","splice","checkGuess","pG","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cf97c077.chunk.js","sourcesContent":["\r\nlet C = 0;\r\n\r\nconst randomGuess = (holes, colors) => {\r\n    const guess = Array(holes).fill(0);\r\n    for (let k = 0; k < holes; k++) {\r\n        guess[k] = Math.floor(Math.random() * (colors)) + 1\r\n    }\r\n    C = 0;\r\n    return (guess)\r\n}\r\n\r\n\r\nconst checkGuess = (guess, toGuess) => {\r\n    const g = [...guess], tg = [...toGuess];\r\n    // console.log(guess)\r\n    // console.log(toGuess)\r\n    let gcgp = 0, gcbp = 0;\r\n    // check good color + good position:\r\n    for (let k = g.length - 1; k >=0 ; k--) {\r\n        if (g[k] === tg[k]) {\r\n            gcgp ++;\r\n            g.splice(k, 1)\r\n            tg.splice(k, 1)\r\n        }\r\n    }\r\n    // console.log(\"*\".repeat(10))\r\n    // console.log(gcgp)\r\n    // console.log(g)\r\n    // console.log(tg)\r\n    // check good color + bad position:\r\n    for (let k = 0; k < g.length; k++) {\r\n        let i = tg.indexOf(g[k])\r\n        if (i != -1) {\r\n            gcbp ++;\r\n            tg.splice(i, 1)\r\n        }\r\n    }\r\n    // console.log(gcbp)\r\n    // console.log(g)\r\n    // console.log(tg)\r\n    return {gcgp:gcgp, gcbp:gcbp}\r\n}\r\n\r\n\r\nexport {randomGuess, checkGuess};","import { useEffect, useState } from \"react\"\r\n\r\nconst MMcolor = ({color, nomargin=false}) => {\r\n    const bgColor = color === \"transparent\" ? \"grey\" : \"transparent\"\r\n    return (\r\n        <button className=\"mm-color\"\r\n        // style={{backgroundColor:bgColor, margin: nomargin ? \"0\" : \"2px\"}}\r\n\r\n        >\r\n        {\r\n            color === \"transparent\" ? null :\r\n            <img src={process.env.PUBLIC_URL+\"/\"+color+\"_pin.png\"} className=\"one-color-img\" draggable=\"false\"/>\r\n        }\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nconst MMtoGuess = ({toGuess, colorOptions, time, timerVisible}) => {\r\n    // const [showTimer, setShowTimer] = useState(true);\r\n    const formatTime = (t) => {\r\n        let m = Math.floor(t / 60);\r\n        let s = t - m * 60;\r\n        if (m < 10) m = \"0\"+m\r\n        if (s < 10) s = \"0\"+s\r\n        return m+\":\"+s\r\n    }\r\n    // console.log(time)\r\n    // console.log(timerVisible)\r\n    return (\r\n        <div className=\"mm-toguess mm-row\">\r\n            <div className=\"mm-left\"></div>\r\n            <div className=\"mm-txt mm-right\">\r\n                {timerVisible ? <div>{formatTime(time)}</div> : null}\r\n            </div>\r\n        <div className=\"mm-center\">\r\n            {\r\n                toGuess.map((e, i)=> {\r\n                    return (\r\n                        <MMcolor key={i} color={colorOptions[e]}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMcolorEditor = ({colorOptions, color, setColor, clickMode=false}) => {\r\n    const [editOn, setEditOn] = useState(false);\r\n    let windowEventName = \"\";\r\n    let onTouchStart = () => {};\r\n    let onMouseDown = () => {};\r\n    let onTouchMove = () => {};\r\n    let onMouseMove = () => {};\r\n    let onTouchEnd = () => {};\r\n    let onMouseUp = () => {};\r\n    let onClick = () => {};\r\n\r\n    if (clickMode) {\r\n        onClick = (e)=> {\r\n            if (editOn) {\r\n                console.log(\"here\")\r\n                const id = getElemIdFromMouseEvent(e)\r\n                console.log(id)\r\n                if (id) setColor(id)\r\n                setEditOn(false)\r\n            } else {\r\n                setTimeout(()=>setEditOn(true), 0)\r\n            }\r\n        }\r\n        // onMouseDown = () => {\r\n        //     window.scrollTo(100000, 100000)\r\n        // }\r\n        windowEventName = \"click\"\r\n    } else {\r\n        onTouchStart = () => {\r\n            setEditOn(true)\r\n            // window.scrollTo(100000, 100000)\r\n        }\r\n        onMouseDown = () => {\r\n            setEditOn(true)\r\n            // console.log(\"scrolling\")\r\n            // window.scrollTo(100000, 100000)\r\n        }\r\n        onTouchMove = (e) => {\r\n            const id = getElemIdFromTouchEvent(e)\r\n            if (id) setColor(id) \r\n        }\r\n        onMouseMove = (e) => {\r\n            if (editOn) {\r\n                const id = getElemIdFromMouseEvent(e)\r\n                if (id) setColor(id) \r\n            }\r\n        }\r\n        onTouchEnd = (e)=> {\r\n            const id = getElemIdFromTouchEvent(e)\r\n            if (id) setColor(id)\r\n            setEditOn(false)\r\n        }\r\n        onMouseUp = (e)=> {\r\n            const id = getElemIdFromMouseEvent(e)\r\n            if (id) setColor(id)\r\n        }\r\n        windowEventName = \"mouseup\"\r\n    }\r\n    \r\n     useEffect(()=> {\r\n        const listenerAction = (e) => {\r\n            setEditOn(false);\r\n        }\r\n        window.addEventListener(windowEventName, listenerAction)\r\n        return (\r\n            () => {\r\n                window.removeEventListener(windowEventName, listenerAction)\r\n            }\r\n        )\r\n    }, [setEditOn])\r\n    const getElemIdFromTouchEvent = (event) => {\r\n        const elem = document.elementFromPoint(\r\n            event.changedTouches[0].clientX,\r\n            event.changedTouches[0].clientY\r\n        )\r\n        if (!elem) return null\r\n        if (!elem.parentElement.parentElement.getAttribute(\"idkey\")) return null\r\n        return(parseInt(elem.parentElement.parentElement.getAttribute(\"idkey\")))\r\n    }\r\n    const getElemIdFromMouseEvent = (event) => {\r\n        const elem = document.elementFromPoint(\r\n            event.clientX,\r\n            event.clientY\r\n        )\r\n        if (!elem) return null\r\n        if (!elem.parentElement.parentElement.getAttribute(\"idkey\")) return null\r\n        return(parseInt(elem.parentElement.parentElement.getAttribute(\"idkey\")))\r\n    }\r\n\r\n    return (\r\n        <div className=\"mm-editable-colors\" \r\n            onTouchStart={onTouchStart}\r\n            onMouseDown={onMouseDown}\r\n            onTouchMove={onTouchMove}\r\n            onMouseMove={onMouseMove}\r\n            onTouchEnd={onTouchEnd}\r\n            onMouseUp={onMouseUp}\r\n            onClick={onClick}\r\n        >\r\n            <MMcolor color={colorOptions[color]} />\r\n            { editOn ? (\r\n                <div className=\"mm-color-picker\" style={{['--m']: colorOptions.length-1, ['--tan']: 0.40}}>\r\n                {\r\n                    colorOptions.map((e, i) => {\r\n                        if (i === 0) {\r\n                            return (null)\r\n                        }\r\n                        return (\r\n                            <div key={i}\r\n                            idkey={i}\r\n                            style={{['--i']: i+1}}\r\n                            >\r\n                                <MMcolor color={e} nomargin={true} />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            ):(\r\n                null\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguessBuilder = ({colorOptions, colors, setColors, onSubmit, clickSelectMode=false}) => {\r\n    const [isValid, setIsValid] = useState(false);\r\n    useEffect(()=> {\r\n        setIsValid(colors.map((e)=>e!=0).reduce((p, c)=>p && c))\r\n    }, [colors, setIsValid])\r\n    const onReset = () => {\r\n        setColors(Array(colors.length).fill(0))\r\n    }\r\n    return (\r\n        <div className=\"mm-guessbuilder mm-row\">\r\n            <div className=\"mm-right\">\r\n                <button onClick={()=>{onSubmit(colors)}}\r\n                    disabled={!isValid}\r\n                > \r\n                    <img src={process.env.PUBLIC_URL+\"/play_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n                </button>  \r\n            </div>\r\n            <div className=\"mm-left\">\r\n                <button\r\n                    onClick={onReset}\r\n                > \r\n                    <img src={process.env.PUBLIC_URL+\"/reset_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n                </button>  \r\n            </div>\r\n            <div className=\"mm-center\">\r\n                {\r\n                    colors.map((e, i)=> {\r\n                        return (\r\n                            <MMcolorEditor key={i}\r\n                            colorOptions={colorOptions}\r\n                            color={e}\r\n                            setColor={(c) => {\r\n                                const nC = [...colors]\r\n                                nC[i] = c\r\n                                setColors(nC)\r\n                            }}\r\n                            clickMode={clickSelectMode}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguessResPin = ({type}) => {\r\n    return (\r\n        <div className={\"mm-res \" + type}>\r\n        </div>\r\n    )\r\n}\r\nconst MMguessRes = ({gcgp, gcbp}) => {\r\n    const pins = [];\r\n    for (let k = 0; k < gcgp; k++) {\r\n        pins.push(\"mm-gp\")\r\n    }\r\n    for (let k = 0; k < gcbp; k++) {\r\n        pins.push(\"mm-bp\")\r\n    }\r\n    return (\r\n        <div className=\"mm-results\">\r\n            {\r\n                pins.map((e,i) => {\r\n                    return (\r\n                        <MMguessResPin key={i} type={e} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguess = ({colors, result, colorOptions, number}) => {\r\n    return (\r\n        <div className=\"mm-guess mm-row\">\r\n        <div className=\"mm-left\">\r\n            <MMguessRes gcgp={result.gcgp} gcbp={result.gcbp} />\r\n        </div>\r\n        <div className=\"mm-center\">\r\n            {\r\n                colors.map((e, i) => {\r\n                    return (\r\n                        <MMcolor key={i}\r\n                        color={colorOptions[e]} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        <div className=\"mm-txt mm-right\">\r\n            <p>{number}</p>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport {MMtoGuess, MMguessBuilder, MMguess};","import React, {useState, useEffect} from \"react\";\r\n\r\nconst InitSelectBtn = (n, selected, multiselect) => {\r\n    const selectedItems = Array(n).fill(false);\r\n    if (selected !== null) {\r\n        if (!Array.isArray(selected)) {\r\n            if (Number.isInteger(selected)) {\r\n                selected = [selected]\r\n            } else {\r\n                throw \"'selected' must be an integer of an array of integer\"\r\n            }\r\n        } else {\r\n            if (!multiselect & selected.length != 1) {\r\n                selected = [selected[0]]\r\n            }\r\n        }\r\n        selected.map((e, i) => {\r\n            if (!Number.isInteger(e)) {\r\n                throw \"item \"+i+\" of 'selected' is not an integer\"\r\n            }\r\n            selectedItems[e] = true;\r\n        })\r\n    }\r\n    return (selectedItems);\r\n}\r\n\r\nconst SelectBtn = ({items, onChange, selected=null, multiselect=false,\r\n    class_container=null, class_item=null}) => {\r\n  \r\n    const [selectedItems, setSelectedItems] = useState(InitSelectBtn(items.length, selected, multiselect));\r\n\r\n    useEffect(()=> {\r\n        if (onChange) {\r\n            const selItems = [];\r\n            selectedItems.map((e, i)=> {\r\n                if (e) {\r\n                    selItems.push(i)\r\n                }\r\n            })\r\n            onChange(selectedItems, selItems)\r\n        }\r\n    }, [selectedItems])\r\n    const onClickAction = (i) => {\r\n        setSelectedItems(s=>{\r\n            return (\r\n                s.map((e, j)=> {\r\n                    if (!multiselect) {\r\n                        e = false;\r\n                    }\r\n                    if (i===j) {\r\n                        return (!e);\r\n                    } else {\r\n                        return (e);\r\n                    }\r\n                })\r\n            )\r\n        })\r\n    }\r\n    return (\r\n        <div className={class_container ? class_container : \"\"}>\r\n            {\r\n                items.map((e, i)=>{\r\n                    return (\r\n                        <button key={i}\r\n                            onClick={()=>onClickAction(i)}\r\n                            className={class_item ? class_item : \"\"}\r\n                            isselected={selectedItems[i] ? \"true\" : \"false\"}\r\n                        >\r\n                            {e}\r\n                        </button>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectBtn;\r\n","import SelectBtn from \"./customWidgets/select-btn\"\r\nimport React from \"react\";\r\n// import \"./MM.css\"\r\n\r\nconst MMbuttons = ({onNewGame, onGiveUp, onOpenConfig}) => {\r\n    return (\r\n        <div className=\"mm-row\">\r\n        <div className=\"mm-left\"></div>\r\n        <div className=\"mm-right\"></div>\r\n        <div className=\"mm-buttons mm-center\">\r\n        <button onClick={onGiveUp}> \r\n            <img src={process.env.PUBLIC_URL+\"/show_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>    \r\n            <button onClick={onNewGame}>\r\n            <img src={process.env.PUBLIC_URL+\"/restart_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>    \r\n            <button onClick={()=>onOpenConfig()}>\r\n                <img src={process.env.PUBLIC_URL+\"/config_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMconfig = ({onCloseConfig, \r\n    nHoles, onNumberOfHolesChange,\r\n    nColors, onNumberOfColorsChange,\r\n    clickSelectMode, onSelectModeChange,\r\n    timerVisible, onChangeTimerVisibility\r\n    }) => {\r\n\r\n\r\n    const selectionModes = [\r\n        \"Click and slide/drag\",\r\n        \"Click and click\"\r\n    ]\r\n\r\n    const numberHoles = [\r\n        3, 4, 5, 6, 7, 8\r\n    ]\r\n    const numberColors = [\r\n        3, 4, 5, 6, 7, 8\r\n    ]\r\n\r\n    const showTimerOptions = [\r\n        \"No\", \"Yes\"\r\n    ]\r\n\r\n    return (\r\n        <div className=\"mm-config\">\r\n            <button className=\"mm-btn-close-config\" onClick={()=>onCloseConfig()}>\r\n                <img src={process.env.PUBLIC_URL+\"/reset_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>\r\n            <section>\r\n                <h3>How do you want to select the colors?</h3>\r\n                <SelectBtn \r\n                items={selectionModes.map(e=>{\r\n                    return (\r\n                        <p>{e}</p>\r\n                    )\r\n                })}\r\n                onChange={(a, i)=>{\r\n                    console.log(i)\r\n                    console.log(i[0]===1)\r\n                    onSelectModeChange(i[0]===1)\r\n                }}\r\n                class_container=\"slct-container\"\r\n                class_item=\"slct-item\"\r\n                selected={clickSelectMode}\r\n                multiselect={false}\r\n                />\r\n            </section>\r\n            <section>\r\n                <h3>How many holes do you want ?</h3>\r\n                <p>(will only take effect for the next game)</p>\r\n                <SelectBtn \r\n                items={numberHoles.map(e=>{\r\n                    return (\r\n                        <p>{e}</p>\r\n                    )\r\n                })}\r\n                onChange={(a, i)=>{\r\n                    onNumberOfHolesChange(numberHoles[i])\r\n                }}\r\n                class_container=\"slct-container\"\r\n                class_item=\"slct-item\"\r\n                selected={numberHoles.indexOf(nHoles)}\r\n                multiselect={false}\r\n                />\r\n            </section>\r\n            <section>\r\n                <h3>How many colors do you want ?</h3>\r\n                <p>(will only take effect for the next game)</p>\r\n                <SelectBtn \r\n                items={numberColors.map(e=>{\r\n                    return (\r\n                        <p>{e}</p>\r\n                    )\r\n                })}\r\n                onChange={(a, i)=>{\r\n                    onNumberOfColorsChange(numberHoles[i])\r\n                }}\r\n                class_container=\"slct-container\"\r\n                class_item=\"slct-item\"\r\n                selected={numberColors.indexOf(nColors)}\r\n                multiselect={false}\r\n                />\r\n            </section>\r\n            <section>\r\n                <h3>Do you want do see the timer ?</h3>\r\n                <p>(will only take effect for the next game)</p>\r\n                <SelectBtn \r\n                items={showTimerOptions.map(e=>{\r\n                    return (\r\n                        <p>{e}</p>\r\n                    )\r\n                })}\r\n                onChange={(a, i)=>{\r\n                    console.log(i)\r\n                    onChangeTimerVisibility(i[0]===1)\r\n                }}\r\n                class_container=\"slct-container\"\r\n                class_item=\"slct-item\"\r\n                selected={timerVisible ? 1 : 0}\r\n                multiselect={false}\r\n                />\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport {MMconfig, MMbuttons};","import React, {useState, useEffect} from \"react\";\r\nimport \"./MM.css\"\r\nimport {randomGuess, checkGuess} from \"./game_logic/utils\";\r\nimport {MMtoGuess, MMguessBuilder, MMguess} from \"./MMcomp\";\r\nimport {MMconfig, MMbuttons} from \"./MMcfg\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst allColors = [\r\n    \"transparent\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"yellow\",\r\n    \"red\",\r\n    \"black\",\r\n    \"white\",\r\n    \"violet\",\r\n    \"turquoise\",\r\n]\r\n\r\nconst MM = () => {\r\n    // const [language, setLanguage] = useState(\"fr\");\r\n    const [gameDim, setGameDim] = useState({\r\n        holes: 4,\r\n        colors: 6,\r\n    })\r\n    const [tmpNcolors, setTmpNcolors] = useState(6);\r\n    const [tmpNholes, setTmpNholes] = useState(4);\r\n\r\n    // console.log(allColors.slice(0, gameDim.colors+1))\r\n    const [colorOptions, setColorOptions] = useState(allColors.slice(0, gameDim.colors+1))\r\n    useEffect(()=>{\r\n        setColorOptions(allColors.slice(0, gameDim.colors+1))\r\n        updateGameLayout();\r\n    }, [gameDim, setColorOptions])\r\n    const onResize = () => {\r\n        updateGameLayout()\r\n    }\r\n    useEffect(()=>{\r\n        window.addEventListener(\"resize\", onResize)\r\n        return (()=>{\r\n            window.removeEventListener(\"resize\", onResize)\r\n        }\r\n        )\r\n    })\r\n    const [toGuess, setToGuess] = useState(randomGuess(gameDim.holes, gameDim.colors))\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [guesses, setGuesses] = useState([]);\r\n    const [currentGuess, setCurrentGuess] = useState(Array(gameDim.holes).fill(0))\r\n    const [configOpen, setConfigOpen] = useState(false)\r\n    const [timerVisible, setTimerVisible] = useState(true)\r\n    const [clickSelectMode, setClickSelectMode] = useState(false)\r\n    \r\n    const [time, setTime] = useState(0);\r\n    const [timer, setTimer] = useState(null);\r\n\r\n    const resetTimer = () => {\r\n        setTime(0);\r\n    }\r\n    const startTimer = () => {\r\n        console.log(\"starting timer\")\r\n        setTimer(setInterval(()=>{\r\n            setTime(t=>t+1)\r\n        }, 1000))\r\n    }\r\n    const stopTimer = () => {\r\n        console.log(\"stopping timer\")\r\n        clearInterval(timer)\r\n    }\r\n\r\n    const onNewGame = () => {\r\n        setGameDim(gd=>({...gd, holes: tmpNholes, colors: tmpNcolors}))\r\n        setGuesses([])\r\n        setCurrentGuess(Array(tmpNholes).fill(0))\r\n        setToGuess(randomGuess(tmpNholes, tmpNcolors))\r\n        setGameOver(false)\r\n        resetTimer();\r\n    }\r\n\r\n    const onGiveUp = () => {\r\n        setGameOver(true)\r\n        stopTimer();\r\n    }\r\n    const onSubmitGuess = (g) => {\r\n        if (guesses.length === 0) startTimer();\r\n        const guessRes = checkGuess(g, toGuess)\r\n        if (guessRes.gcgp === toGuess.length) {\r\n            setGameOver(true);\r\n            stopTimer();\r\n        }\r\n        setGuesses(pG => {\r\n            return ([...pG, {g: g, r:guessRes}])\r\n        })\r\n    }\r\n\r\n    const onToggleConfig = (open=true) => {\r\n        console.log(\"opening config\")\r\n        setConfigOpen(open);\r\n    }\r\n    \r\n    const updateGameLayout = () => {\r\n        const r = document.querySelector(\":root\");\r\n        const n = gameDim.holes;\r\n        // const W = 40;\r\n        // const w = W / 2;\r\n        const M = 2;\r\n        // const T = (n * (W + 2*M)) + (n * (W / 2 + 2*M)) + (2 * (W + M) );\r\n        // const T = W * (n+n/2+2) + M * (4*n + 2) + 4;\r\n        const T = document.body.clientWidth - 60; \r\n        const nW = (T - 4 - M * (4*n + 2)) / (n + n/3 + 2)\r\n        const W = Math.min(nW, 40);\r\n        // nW+2nM + 1/2nW + 2nM + 2W + 2M\r\n        // W(n+n/2+2) + 4nM + 2M\r\n\r\n        // console.log(\"*****\")\r\n        // console.log(T)\r\n        // console.log(document.body.clientWidth)\r\n\r\n        r.style.setProperty(\"--center-size\", (n * (W + 2*M)) + \"px\");\r\n        r.style.setProperty(\"--left-size\", (n * (W / 2 + 2*M)) + \"px\");\r\n        r.style.setProperty(\"--right-size\", (2 * (W + M) ) + \"px\");\r\n        r.style.setProperty(\"--main-size\", W + \"px\");\r\n        r.style.setProperty(\"--secondary-size\", W / 3 + \"px\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"mm-container\">\r\n            {configOpen ? (\r\n            <MMconfig\r\n                onCloseConfig={()=>onToggleConfig(false)}\r\n                nHoles={gameDim.holes}\r\n                onNumberOfHolesChange={(n)=>(setTmpNholes(n))}\r\n                nColors={gameDim.colors}\r\n                onNumberOfColorsChange={(n)=>(setTmpNcolors(n))}\r\n                clickSelectMode={clickSelectMode ? 1 : 0}\r\n                onSelectModeChange={(c)=>(setClickSelectMode(c))}\r\n                timerVisible={timerVisible}\r\n                onChangeTimerVisibility={(v)=>setTimerVisible(v)}\r\n            />\r\n                ) : (\r\n        \r\n            \r\n            <div className=\"mm-game\">\r\n                {/* main buttons */}\r\n                <MMbuttons \r\n                    onNewGame={onNewGame}\r\n                    onGiveUp={onGiveUp}\r\n                    onOpenConfig={()=>{onToggleConfig(true)}}\r\n                />\r\n                {/* to guess object */}\r\n                <MMtoGuess\r\n                    toGuess={gameOver ? toGuess : Array(toGuess.length).fill(0) }\r\n                    colorOptions={colorOptions}\r\n                    timerVisible={timerVisible}\r\n                    time={time}\r\n                    \r\n                />\r\n                {/* guesses */}\r\n                {guesses.map((e, i)=> {\r\n                    return (\r\n                        <MMguess key={i}\r\n                        colors={e.g}\r\n                        result={e.r}\r\n                        colorOptions={colorOptions}\r\n                        number={i + 1}\r\n                            />\r\n                    )\r\n                })}\r\n                {/* new guess */}\r\n                {gameOver ? null : <MMguessBuilder\r\n                    colorOptions={colorOptions}\r\n                    colors={currentGuess}\r\n                    setColors={(c)=>{setCurrentGuess(c)}}\r\n                    onSubmit={onSubmitGuess}\r\n                    clickSelectMode={clickSelectMode}\r\n                />}\r\n            </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default MM;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MM from './MM'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MM />\r\n  </React.StrictMode>\r\n  , \r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}