{"version":3,"sources":["game_logic/utils.js","MastermindComp.js","customWidgets/select-btn.js","MastermindConfig.js","Mastermind.js","index.js"],"names":["randomGuess","holes","colors","guess","Array","fill","k","Math","floor","random","MMcolor","color","nomargin","bgColor","className","style","backgroundColor","margin","src","process","draggable","MMtoGuess","toGuess","colorOptions","onNewGame","onGiveUp","time","onOpenConfig","useState","showTimer","setShowTimer","onClick","r","document","querySelector","v","parseInt","window","getComputedStyle","getPropertyValue","console","log","setProperty","t","m","s","formatTime","map","e","i","MMcolorEditor","setColor","clickMode","MMcolorEditor_click","editOn","setEditOn","useEffect","listenerAction","addEventListener","removeEventListener","id","event","elem","elementFromPoint","clientX","clientY","parentElement","getAttribute","getElemIdFromMouseEvent","setTimeout","length","idkey","MMcolorEditor_drag","getElemIdFromTouchEvent","changedTouches","onTouchStart","onMouseDown","onTouchMove","onMouseMove","onTouchEnd","onMouseUp","MMguessBuilder","setColors","onSubmit","clickSelectMode","isValid","setIsValid","reduce","p","c","disabled","nC","MMguessResPin","type","MMguessRes","gcgp","gcbp","pins","push","MMguess","result","number","SelectBtn","items","onChange","selected","multiselect","class_container","class_item","n","selectedItems","isArray","Number","isInteger","InitSelectBtn","setSelectedItems","selItems","j","onClickAction","isselected","MMconfig","onCloseConfig","nHoles","onNumberOfHolesChange","nColors","onNumberOfColorsChange","onSelectModeChange","numberHoles","numberColors","a","indexOf","allColors","Mastermind","gameDim","setGameDim","slice","setColorOptions","setToGuess","gameOver","setGameOver","guesses","setGuesses","currentGuess","setCurrentGuess","configOpen","setConfigOpen","setClickSelectMode","setTime","timer","setTimer","stopTimer","clearInterval","onToggleConfig","open","gd","g","setInterval","guessRes","tg","splice","checkGuess","pG","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bbc72b3a.chunk.js","sourcesContent":["\r\nlet C = 0;\r\n\r\nconst randomGuess = (holes, colors) => {\r\n    const guess = Array(holes).fill(0);\r\n    for (let k = 0; k < holes; k++) {\r\n        guess[k] = Math.floor(Math.random() * (colors)) + 1\r\n    }\r\n    C = 0;\r\n    return (guess)\r\n}\r\n\r\n\r\nconst checkGuess = (guess, toGuess) => {\r\n    const g = [...guess], tg = [...toGuess];\r\n    // console.log(guess)\r\n    // console.log(toGuess)\r\n    let gcgp = 0, gcbp = 0;\r\n    // check good color + good position:\r\n    for (let k = g.length - 1; k >=0 ; k--) {\r\n        if (g[k] === tg[k]) {\r\n            gcgp ++;\r\n            g.splice(k, 1)\r\n            tg.splice(k, 1)\r\n        }\r\n    }\r\n    // console.log(\"*\".repeat(10))\r\n    // console.log(gcgp)\r\n    // console.log(g)\r\n    // console.log(tg)\r\n    // check good color + bad position:\r\n    for (let k = 0; k < g.length; k++) {\r\n        let i = tg.indexOf(g[k])\r\n        if (i != -1) {\r\n            gcbp ++;\r\n            tg.splice(i, 1)\r\n        }\r\n    }\r\n    // console.log(gcbp)\r\n    // console.log(g)\r\n    // console.log(tg)\r\n    return {gcgp:gcgp, gcbp:gcbp}\r\n}\r\n\r\n\r\nexport {randomGuess, checkGuess};","import { useEffect, useState } from \"react\"\r\n// import Select from \"react-select\"\r\n// import play_img from \"./img/play_img.svg\"\r\n// import reset_img from \"./img/reset_img.svg\"\r\n// import restart_img from \"./img/restart_img.svg\"\r\n// import show_img from \"./img/show_img.svg\"\r\n// import timer_img from \"./img/timer_img.svg\"\r\n// import notimer_img from \"./img/notimer_img.svg\"\r\n// import config_img from \"./img/config_img.svg\"\r\n\r\nconst MMcolor = ({color, nomargin=false}) => {\r\n    const bgColor = color === \"transparent\" ? \"grey\" : \"transparent\"\r\n    return (\r\n        <button className=\"one-color-btn\"\r\n        style={{backgroundColor:bgColor, margin: nomargin ? \"0\" : \"2px\"}}\r\n\r\n        >\r\n        {\r\n            color === \"transparent\" ? null :\r\n            // <img src={process.env.PUBLIC_URL+\"/\"+color+\"_pin.png\"} className=\"one-color-img\" draggable=\"false\" width=\"40px\" height=\"40px\"/>\r\n            <img src={process.env.PUBLIC_URL+\"/\"+color+\"_pin.png\"} className=\"one-color-img\" draggable=\"false\"/>\r\n        }\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nconst MMtoGuess = ({toGuess, colorOptions, onNewGame, onGiveUp, time, onOpenConfig}) => {\r\n    const [showTimer, setShowTimer] = useState(true);\r\n    const formatTime = (t) => {\r\n        // if (t === 0)  return \"00:00\"\r\n        let m = Math.floor(t / 60);\r\n        let s = t - m * 60;\r\n        if (m < 10) m = \"0\"+m\r\n        if (s < 10) s = \"0\"+s\r\n        return m+\":\"+s\r\n    }\r\n    return (\r\n        <div className=\"mm-toguess-container\">\r\n        <div className=\"one-color-row\">\r\n            <button onClick={()=>{\r\n                const r = document.querySelector(\":root\");\r\n                let v = parseInt(window.getComputedStyle(r).getPropertyValue('--refwidth'));\r\n                if (v > 25) v--;\r\n                console.log(v);\r\n                r.style.setProperty(\"--refwidth\", v+\"px\");\r\n            }}> \r\n                <img src={process.env.PUBLIC_URL+\"/zoomout_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>    \r\n            <button onClick={onGiveUp}> \r\n                <img src={process.env.PUBLIC_URL+\"/show_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>\r\n            <button onClick={onNewGame}>\r\n            <img src={process.env.PUBLIC_URL+\"/restart_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>    \r\n            {\r\n                showTimer ? <div className=\"mm-timer\"><div>{formatTime(time)}</div></div> : null\r\n            }\r\n            <button onClick={()=>setShowTimer(t=>!t)}>\r\n                <img src={showTimer ? (\r\n                    process.env.PUBLIC_URL+\"/notimer_img.svg\" \r\n                    ): ( process.env.PUBLIC_URL+\"/timer_img.svg\" \r\n                    )} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>\r\n            <button onClick={()=>onOpenConfig()}>\r\n                <img src={process.env.PUBLIC_URL+\"/config_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>\r\n            <button onClick={()=>{\r\n                const r = document.querySelector(\":root\");\r\n                let v = parseInt(window.getComputedStyle(r).getPropertyValue('--refwidth'));\r\n                if (v < 50) v++;\r\n                r.style.setProperty(\"--refwidth\", v+\"px\");\r\n            }}> \r\n                <img src={process.env.PUBLIC_URL+\"/zoomin_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button> \r\n        </div>\r\n        <div className=\"one-color-row mm-rounded-border\">\r\n            {\r\n                toGuess.map((e, i)=> {\r\n                    return (\r\n                        <MMcolor key={i} color={colorOptions[e]}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMcolorEditor = ({colorOptions, color, setColor, clickMode=false}) => {\r\n    return (\r\n        clickMode ? (\r\n            <MMcolorEditor_click colorOptions={colorOptions} color={color} setColor={setColor} /> \r\n        ):(\r\n            <MMcolorEditor_drag colorOptions={colorOptions} color={color} setColor={setColor} /> \r\n        ) \r\n    )\r\n}\r\n\r\nconst MMcolorEditor_click = ({colorOptions, color, setColor}) => {\r\n    const [editOn, setEditOn] = useState(false);\r\n    useEffect(()=> {\r\n        const listenerAction = (e) => {\r\n            setEditOn(false);\r\n        }\r\n        window.addEventListener(\"click\", listenerAction)\r\n        return (\r\n            () => {\r\n                window.removeEventListener(\"click\", listenerAction)\r\n            }\r\n        )\r\n    }, [setEditOn])\r\n    const getElemIdFromMouseEvent = (event) => {\r\n        const elem = document.elementFromPoint(\r\n            event.clientX,\r\n            event.clientY\r\n        )\r\n        if (!elem) return null\r\n        if (!elem.parentElement.parentElement.getAttribute(\"idkey\")) return null\r\n        return(parseInt(elem.parentElement.parentElement.getAttribute(\"idkey\")))\r\n    }\r\n    return (\r\n        <div className=\"mm-editable-color\" \r\n            onClick={(e)=> {\r\n                console.log(editOn)\r\n                if (editOn) {\r\n                    console.log(\"here\")\r\n                    const id = getElemIdFromMouseEvent(e)\r\n                    console.log(id)\r\n                    if (id) setColor(id)\r\n                    setEditOn(false)\r\n                } else {\r\n                    setTimeout(()=>setEditOn(true), 0)\r\n                }\r\n            }}\r\n        >\r\n            <MMcolor color={colorOptions[color]} />\r\n            { editOn ? (\r\n                <div className=\"mm-color-options\" style={{['--m']: colorOptions.length-1, ['--tan']: 0.40}}>\r\n                {\r\n                    colorOptions.map((e, i) => {\r\n                        if (i === 0) {\r\n                            return (null)\r\n                        }\r\n                        return (\r\n                            <div key={i}\r\n                            idkey={i}\r\n                            style={{['--i']: i+1}}\r\n                            >\r\n                                <MMcolor color={e} nomargin={true}/>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            ):(\r\n                null\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMcolorEditor_drag = ({colorOptions, color, setColor}) => {\r\n    const [editOn, setEditOn] = useState(false);\r\n    useEffect(()=> {\r\n        const listenerAction = (e) => {\r\n            setEditOn(false);\r\n        }\r\n        window.addEventListener(\"mouseup\", listenerAction)\r\n        return (\r\n            () => {\r\n                window.removeEventListener(\"mouseup\", listenerAction)\r\n            }\r\n        )\r\n    }, [setEditOn])\r\n    const getElemIdFromTouchEvent = (event) => {\r\n        const elem = document.elementFromPoint(\r\n            event.changedTouches[0].clientX,\r\n            event.changedTouches[0].clientY\r\n        )\r\n        if (!elem) return null\r\n        if (!elem.parentElement.parentElement.getAttribute(\"idkey\")) return null\r\n        return(parseInt(elem.parentElement.parentElement.getAttribute(\"idkey\")))\r\n    }\r\n    const getElemIdFromMouseEvent = (event) => {\r\n        const elem = document.elementFromPoint(\r\n            event.clientX,\r\n            event.clientY\r\n        )\r\n        if (!elem) return null\r\n        if (!elem.parentElement.parentElement.getAttribute(\"idkey\")) return null\r\n        return(parseInt(elem.parentElement.parentElement.getAttribute(\"idkey\")))\r\n    }\r\n    // console.log(colorOptions)\r\n    return (\r\n        <div className=\"mm-editable-color\" \r\n            onTouchStart={()=> {\r\n                setEditOn(true)\r\n            }}\r\n            onMouseDown={()=> {\r\n                setEditOn(true)\r\n            }}\r\n            onTouchMove={(e)=> {\r\n                const id = getElemIdFromTouchEvent(e)\r\n                if (id) setColor(id) \r\n            }}\r\n            onMouseMove={(e)=>{\r\n                if (editOn) {\r\n                    const id = getElemIdFromMouseEvent(e)\r\n                    if (id) setColor(id) \r\n                }\r\n            }}\r\n            onTouchEnd={(e)=> {\r\n                const id = getElemIdFromTouchEvent(e)\r\n                if (id) setColor(id)\r\n                setEditOn(false)\r\n\r\n            }}\r\n            onMouseUp={(e)=> {\r\n                const id = getElemIdFromMouseEvent(e)\r\n                if (id) setColor(id)\r\n            }}\r\n        >\r\n            <MMcolor color={colorOptions[color]} />\r\n            { editOn ? (\r\n                <div className=\"mm-color-options\" style={{['--m']: colorOptions.length-1, ['--tan']: 0.40}}>\r\n                {\r\n                    colorOptions.map((e, i) => {\r\n                        if (i === 0) {\r\n                            return (null)\r\n                        }\r\n                        return (\r\n                            <div key={i}\r\n                            idkey={i}\r\n                            style={{['--i']: i+1}}\r\n                            >\r\n                                <MMcolor color={e} nomargin={true} />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            ):(\r\n                null\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguessBuilder = ({colorOptions, colors, setColors, onSubmit, clickSelectMode=false}) => {\r\n    const [isValid, setIsValid] = useState(false);\r\n    useEffect(()=> {\r\n        setIsValid(colors.map((e)=>e!=0).reduce((p, c)=>p && c))\r\n    }, [colors, setIsValid])\r\n    const onReset = () => {\r\n        setColors(Array(colors.length).fill(0))\r\n    }\r\n    return (\r\n        <div className=\"one-color-row\">\r\n            <div className=\"mm-ingame-btns-right\">\r\n                <button onClick={()=>{onSubmit(colors)}}\r\n                    disabled={!isValid}\r\n                > \r\n                    <img src={process.env.PUBLIC_URL+\"/play_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n                </button>  \r\n            </div>\r\n            <div className=\"mm-ingame-btns-left\">\r\n                <button\r\n                    onClick={onReset}\r\n                > \r\n                    <img src={process.env.PUBLIC_URL+\"/reset_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n                </button>  \r\n            </div>\r\n            {\r\n                colors.map((e, i)=> {\r\n                    return (\r\n                        <MMcolorEditor key={i}\r\n                        colorOptions={colorOptions}\r\n                        color={e}\r\n                        setColor={(c) => {\r\n                            const nC = [...colors]\r\n                            nC[i] = c\r\n                            setColors(nC)\r\n                        }}\r\n                        clickMode={clickSelectMode}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguessResPin = ({type}) => {\r\n    return (\r\n        <div className={\"mm-res-pin \" + type}>\r\n        </div>\r\n    )\r\n}\r\nconst MMguessRes = ({gcgp, gcbp}) => {\r\n    const pins = [];\r\n    for (let k = 0; k < gcgp; k++) {\r\n        pins.push(\"gcgp\")\r\n    }\r\n    for (let k = 0; k < gcbp; k++) {\r\n        pins.push(\"gcbp\")\r\n    }\r\n    return (\r\n        <div className=\"mm-result\">\r\n            {\r\n                pins.map((e,i) => {\r\n                    return (\r\n                        <MMguessResPin key={i} type={e} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MMguess = ({colors, result, colorOptions, number}) => {\r\n    return (\r\n        <div className=\"one-color-row\">\r\n            <div className=\"mm-ingame-btns-right\"><div className=\"mm-number\">{number}</div></div>\r\n            <MMguessRes gcgp={result.gcgp} gcbp={result.gcbp} />\r\n            {\r\n                colors.map((e, i) => {\r\n                    return (\r\n                        <MMcolor key={i}\r\n                        color={colorOptions[e]} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport {MMtoGuess, MMguessBuilder, MMguess};","import React, {useState, useEffect} from \"react\";\r\nimport \"./select-btn.css\";\r\n\r\nconst InitSelectBtn = (n, selected, multiselect) => {\r\n    const selectedItems = Array(n).fill(false);\r\n    if (selected !== null) {\r\n        if (!Array.isArray(selected)) {\r\n            if (Number.isInteger(selected)) {\r\n                selected = [selected]\r\n            } else {\r\n                throw \"'selected' must be an integer of an array of integer\"\r\n            }\r\n        } else {\r\n            if (!multiselect & selected.length != 1) {\r\n                selected = [selected[0]]\r\n            }\r\n        }\r\n        selected.map((e, i) => {\r\n            if (!Number.isInteger(e)) {\r\n                throw \"item \"+i+\" of 'selected' is not an integer\"\r\n            }\r\n            selectedItems[e] = true;\r\n        })\r\n    }\r\n    return (selectedItems);\r\n}\r\n\r\nconst SelectBtn = ({items, onChange, selected=null, multiselect=false,\r\n    class_container=null, class_item=null}) => {\r\n  \r\n    const [selectedItems, setSelectedItems] = useState(InitSelectBtn(items.length, selected, multiselect));\r\n\r\n    useEffect(()=> {\r\n        console.log(\"Has changed: \" + selectedItems)\r\n        if (onChange) {\r\n            const selItems = [];\r\n            selectedItems.map((e, i)=> {\r\n                if (e) {\r\n                    selItems.push(i)\r\n                }\r\n            })\r\n            onChange(selectedItems, selItems)\r\n        }\r\n    }, [selectedItems])\r\n    const onClickAction = (i) => {\r\n        setSelectedItems(s=>{\r\n            return (\r\n                s.map((e, j)=> {\r\n                    if (!multiselect) {\r\n                        e = false;\r\n                    }\r\n                    if (i===j) {\r\n                        return (!e);\r\n                    } else {\r\n                        return (e);\r\n                    }\r\n                })\r\n            )\r\n        })\r\n    }\r\n\r\n    // const computedStyle = {\r\n    //     gridTemplateColumns: \"auto \".repeat(computeStyle(items.length)).trim()\r\n    // }\r\n    // const style = {\r\n    //     display: \"flex\",\r\n    //     flexDirection: \"row\",\r\n    //     flexWrap: \"wrap\",\r\n    //     justifyContent: \"flex-start\",\r\n    //     alignContent: \"center\",\r\n    // }\r\n    return (\r\n        <div className={\"select-btn-container\"+ (class_container ? \" \"+class_container : \"\")}>\r\n            {\r\n                items.map((e, i)=>{\r\n                    return (\r\n                        <button key={i}\r\n                            onClick={()=>onClickAction(i)}\r\n                            className={class_item}\r\n                            isselected={selectedItems[i] ? \"true\" : \"false\"}\r\n                        >\r\n                            {e}\r\n                        </button>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n// const computeStyle = (n) => {\r\n//     const tmod = [4, 5];\r\n//     if (n < Math.min(...tmod)) {\r\n//         return n;\r\n//     }\r\n//     const mod = tmod.map(e=>n%e)\r\n//     let isZero=-1;\r\n//     let isMax=-1, curMax=0;\r\n//     for (let k = 0; k<n; k++) {\r\n//         if (mod[k] == 0) {\r\n//             isZero = k;\r\n//         } else {\r\n//             if (mod[k] >= curMax) {\r\n//                 isMax = k;\r\n//                 curMax = tmod[k]\r\n//             }\r\n//         }\r\n//     }\r\n//     if (isZero == -1) {\r\n//         return tmod[isMax]\r\n//     } else {\r\n//         return tmod[isZero]\r\n//     }\r\n// }\r\n\r\nexport default SelectBtn;\r\n","import SelectBtn from \"./customWidgets/select-btn\"\r\nimport React from \"react\";\r\nimport \"./MastermindConfig.css\"\r\n\r\nconst MMconfig = ({onCloseConfig, \r\n    nHoles, onNumberOfHolesChange,\r\n    nColors, onNumberOfColorsChange,\r\n    clickSelectMode, onSelectModeChange\r\n    }) => {\r\n\r\n\r\n    // const languages = [\r\n    //     {\r\n    //         id: \"fr\",\r\n    //         img: \"fr_img.png\"\r\n    //     },\r\n    //     {\r\n    //         id: \"en\", \r\n    //         img: \"en_img.png\"\r\n    //     }\r\n    // ]\r\n\r\n    const selectionModes = [\r\n        \"Click and slide/drag\",\r\n        \"Click and click\"\r\n    ]\r\n\r\n    const numberHoles = [\r\n        3, 4, 5, 6, 7, 8\r\n    ]\r\n    const numberColors = [\r\n        3, 4, 5, 6, 7, 8\r\n    ]\r\n    // console.log(\"HOLES\")\r\n    // console.log(nHoles)\r\n    // console.log(numberHoles.indexOf(nHoles));\r\n\r\n    return (\r\n        <div className=\"mm-config\">\r\n            <button className=\"mm-btn-close-config\" onClick={()=>onCloseConfig()}>\r\n                <img src={process.env.PUBLIC_URL+\"/reset_img.svg\"} className=\"btn-img\" draggable=\"false\"/>\r\n            </button>\r\n            {/* <section>\r\n                <h3>Which language do you want to use?</h3>\r\n                <SelectBtn \r\n                items={languages.map(e=>{\r\n                    return (\r\n                        <img src={process.env.PUBLIC_URL+\"/\"+e.img}\r\n                        draggable=\"false\"/>\r\n                    )\r\n                })}\r\n                onChange={(a, i)=>{\r\n                    // console.log(a)\r\n                    // console.log(i)\r\n                }}\r\n                class_container=\"slct-container\"\r\n                class_item=\"slct-item\"\r\n                selected={0}\r\n                multiselect={false}\r\n                />\r\n            </section> */}\r\n            <section>\r\n                <h3>How do you want to select the colors?</h3>\r\n                <SelectBtn \r\n                items={selectionModes.map(e=>{\r\n                    return (\r\n                        <p>{e}</p>\r\n                    )\r\n                })}\r\n                onChange={(a, i)=>{\r\n                    console.log(i)\r\n                    console.log(i[0]===1)\r\n                    onSelectModeChange(i[0]===1)\r\n                }}\r\n                class_container=\"slct-container\"\r\n                class_item=\"slct-item\"\r\n                selected={clickSelectMode}\r\n                multiselect={false}\r\n                />\r\n            </section>\r\n            <section>\r\n                <h3>How many holes do you want ?</h3>\r\n                <p>(will only take effect for the next game)</p>\r\n                <SelectBtn \r\n                items={numberHoles.map(e=>{\r\n                    return (\r\n                        <p>{e}</p>\r\n                    )\r\n                })}\r\n                onChange={(a, i)=>{\r\n                    onNumberOfHolesChange(numberHoles[i])\r\n                }}\r\n                class_container=\"slct-container\"\r\n                class_item=\"slct-item\"\r\n                selected={numberHoles.indexOf(nHoles)}\r\n                multiselect={false}\r\n                />\r\n            </section>\r\n            <section>\r\n                <h3>How many colors do you want ?</h3>\r\n                <p>(will only take effect for the next game)</p>\r\n                <SelectBtn \r\n                items={numberColors.map(e=>{\r\n                    return (\r\n                        <p>{e}</p>\r\n                    )\r\n                })}\r\n                onChange={(a, i)=>{\r\n                    onNumberOfColorsChange(numberHoles[i])\r\n                }}\r\n                class_container=\"slct-container\"\r\n                class_item=\"slct-item\"\r\n                selected={numberColors.indexOf(nColors)}\r\n                multiselect={false}\r\n                />\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MMconfig;","import React, {useState, useEffect} from \"react\";\r\nimport \"./Mastermind.css\"\r\nimport {randomGuess, checkGuess} from \"./game_logic/utils\";\r\nimport {MMtoGuess, MMguessBuilder, MMguess} from \"./MastermindComp\";\r\nimport \"./MastermindComp.css\";\r\n// import close_img from \"./img/reset_img.svg\"\r\n// import SelectBtn from \"./customWidgets/select-btn\"\r\nimport MMconfig from \"./MastermindConfig\";\r\n\r\nconst randomId = () => {\r\n    return (\r\n        Math.random().toString(36)\r\n            .replace(\"0.\", \"\").substring(0, 10)\r\n    )\r\n}\r\n\r\nconst allColors = [\r\n    \"transparent\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"yellow\",\r\n    \"red\",\r\n    \"black\",\r\n    \"white\",\r\n    \"violet\",\r\n    \"turquoise\",\r\n]\r\n\r\n\r\nconst Mastermind = () => {\r\n    // const [language, setLanguage] = useState(\"fr\");\r\n    const [gameDim, setGameDim] = useState({\r\n        holes: 4,\r\n        colors: 6,\r\n    })\r\n    // console.log(allColors.slice(0, gameDim.colors+1))\r\n    const [colorOptions, setColorOptions] = useState(allColors.slice(0, gameDim.colors+1))\r\n    useEffect(()=>{\r\n        setColorOptions(allColors.slice(0, gameDim.colors+1))\r\n    }, [gameDim, setColorOptions])\r\n    \r\n    const [toGuess, setToGuess] = useState(randomGuess(gameDim.holes, gameDim.colors))\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [guesses, setGuesses] = useState([]);\r\n    const [currentGuess, setCurrentGuess] = useState(Array(gameDim.holes).fill(0))\r\n    const [configOpen, setConfigOpen] = useState(false)\r\n    const [clickSelectMode, setClickSelectMode] = useState(false)\r\n    \r\n    const [time, setTime] = useState(0);\r\n    const [timer, setTimer] = useState(null);\r\n\r\n    const resetTimer = () => {\r\n        setTime(0);\r\n    }\r\n    const startTimer = () => {\r\n        setTimer(setInterval(()=>{\r\n            setTime(t=>t+1)\r\n        }, 1000))\r\n    }\r\n    const stopTimer = () => {\r\n        clearInterval(timer)\r\n    }\r\n\r\n    const onNewGame = () => {\r\n        setGuesses([])\r\n        setCurrentGuess(Array(gameDim.holes).fill(0))\r\n        setToGuess(randomGuess(gameDim.holes, gameDim.colors))\r\n        setGameOver(false)\r\n        resetTimer();\r\n    }\r\n\r\n    const onGiveUp = () => {\r\n        setGameOver(true)\r\n        stopTimer();\r\n    }\r\n    const onSubmitGuess = (g) => {\r\n        if (guesses.length === 0) startTimer();\r\n        const guessRes = checkGuess(g, toGuess)\r\n        if (guessRes.gcgp === toGuess.length) {\r\n            setGameOver(true);\r\n            stopTimer();\r\n        }\r\n        setGuesses(pG => {\r\n            return ([...pG, {g: g, r:guessRes}])\r\n        })\r\n    }\r\n\r\n    const onToggleConfig = (open=true) => {\r\n        console.log(\"opening config\")\r\n        setConfigOpen(open);\r\n    }\r\n\r\n    return (\r\n        <div className=\"mm-app-container\">\r\n            {/* <div className=\"title\">\r\n                MindMaster\r\n            </div>           */}\r\n            <div className=\"game-config-container\">\r\n                {configOpen ? (\r\n                <MMconfig\r\n                    onCloseConfig={()=>onToggleConfig(false)}\r\n                    nHoles={gameDim.holes}\r\n                    onNumberOfHolesChange={(n)=>(setGameDim(gd=>({...gd, holes:n})))}\r\n                    nColors={gameDim.colors}\r\n                    onNumberOfColorsChange={(n)=>(setGameDim(gd=>({...gd, colors:n})))}\r\n                    clickSelectMode={clickSelectMode ? 1 : 0}\r\n                    onSelectModeChange={(c)=>(setClickSelectMode(c))}\r\n                />\r\n                 ) : (\r\n                <div className=\"game\">\r\n                    {/* to guess object */}\r\n                    <MMtoGuess\r\n                        toGuess={gameOver ? toGuess : Array(toGuess.length).fill(0) }\r\n                        colorOptions={colorOptions}\r\n                        onNewGame={onNewGame}\r\n                        onGiveUp={onGiveUp}\r\n                        time={time}\r\n                        onOpenConfig={()=>{onToggleConfig(true)}}\r\n                    />\r\n                    {/* guesses */}\r\n                    {guesses.map((e, i)=> {\r\n                        return (\r\n                            <MMguess key={i}\r\n                            colors={e.g}\r\n                            result={e.r}\r\n                            colorOptions={colorOptions}\r\n                            number={i + 1}\r\n                             />\r\n                        )\r\n                    })}\r\n                    {/* new guess */}\r\n                    {gameOver ? null : <MMguessBuilder\r\n                        colorOptions={colorOptions}\r\n                        colors={currentGuess}\r\n                        setColors={(c)=>{setCurrentGuess(c)}}\r\n                        onSubmit={onSubmitGuess}\r\n                        clickSelectMode={clickSelectMode}\r\n                    />}\r\n                </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Mastermind;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Mastermind from './Mastermind'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Mastermind />\r\n  </React.StrictMode>\r\n  , \r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}